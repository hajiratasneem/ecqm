{
    "resourceType": "Library",
    "id": "library-CMS66v8",
    "meta": {
      "versionId": "1",
      "lastUpdated": "2019-08-16T23:03:04.792+00:00",
      "profile": [
        "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/library-cqfm"
      ]
    },
    "url": "http://hl7.org/fhir/us/cqfmeasures/Library/library-CMS66v8",
    "identifier": [
      {
        "use": "official",
        "system": "http://example.org/fhir/cqi/ecqm/Library/Identifier",
        "value": "CMS66v8"
      }
    ],
    "version": "8.2.000",
    "name": "FunctionalStatusAssessmentforTotalKneeReplacement",
    "title": "Functional Status Assessment for Total Knee Replacement",
    "status": "active",
    "experimental": true,
    "type": {
      "coding": [
        {
          "system": "http://hl7.org/fhir/library-type",
          "code": "logic-library"
        }
      ] 
    },
    "date": "2019-12-03",
    "publisher": "Health Level 7 International - Clinical Quality Information Work Group",
    "description": "This library is used as an example in the FHIR Quality Measure Implementation Guide",
    "approvalDate": "2019-08-03",
    "lastReviewDate": "2019-08-03",
    "contact": [
      {
        "telecom": [
          {
            "system": "url",
            "value": "http://www.hl7.org/Special/committees/cqi/index.cfm"
          }
        ]
      }
    ],
    "relatedArtifact": [
      {
        "type": "depends-on"
      }
    ],
    "dataRequirement": [
      {
        "type": "Procedure",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.464.1003.198.12.1007"
          }
        ]
      },  
      {
        "type": "Condition",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "428351000124105"
            }]
          }
        ]
      }, 
      {
        "type": "Condition",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.464.1003.113.12.1037"
          }
        ]
      }, 
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72098-7"
            }]
          }
        ]
      }, 
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72099-5"
            }]
          }
        ]
      }, 
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72100-1"
            }]
          }
        ]
      }, 
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72101-9"
            }]
          }
        ]
      }, 
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72102-7"
            }]
          }
        ]
      },
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "71969-0"
            }]
          }
        ]
      },
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "71971-6"
            }]
          }
        ]
      },
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.464.1003.118.12.1218"
          }
        ]
      },
      {
        "type": "Encounter",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.464.1003.101.12.1008"
          }
        ]
      },
      {
        "type": "Encounter",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.464.1003.101.12.1001"
          }
        ]
      },
      {
        "type": "Encounter",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "99024"
            }]
          }
        ]
      },
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72028-4"
            }]
          }
        ]
      },
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72027-6"
            }]
          }
        ]
      },
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72026-8"
            }]
          }
        ]
      },
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code": [
                {
                    "code": "72025-0"
            }]
          }
        ]
      },
      {
        "type": "Encounter",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.666.5.307"
          }
        ]
      },
      {
        "type": "ServiceRequest",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113762.1.4.1108.15"
          }
        ]
      },
      {
        "type": "Procedure",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113762.1.4.1108.15"
          }
        ]
      }
    ],
    "content": [
      {
        "contentType": "text/cql",
        "data": ""
      }
    ]
  }