{
    "resourceType": "Library",
    "id": "library-CMS2v9",
    "meta": {
      "versionId": "1",
      "lastUpdated": "2019-08-16T23:03:04.792+00:00",
      "profile": [
        "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/library-cqfm"
      ]
    },
    "url": "http://hl7.org/fhir/us/cqfmeasures/Library/library-CMS2v9",
    "identifier": [
      {
        "use": "official",
        "system": "http://example.org/fhir/cqi/ecqm/Library/Identifier",
        "value": "CMS2v9"
      }
    ],
    "version": "9.1.000",
    "name": "PreventiveCareandScreeningScreeningforDepressionandFollowUpPlan",
    "title": "Preventive Careand Screening Screening for Depression and Follow Up Plan",
    "status": "active",
    "experimental": true,
    "type": {
      "coding": [
        {
          "system": "http://hl7.org/fhir/library-type",
          "code": "logic-library"
        }
      ] 
    },
    "date": "2019-12-03",
    "publisher": "Health Level 7 International - Clinical Quality Information Work Group",
    "description": "This library is used as an example in the FHIR Quality Measure Implementation Guide",
    "approvalDate": "2019-08-03",
    "lastReviewDate": "2019-08-03",
    "contact": [
      {
        "telecom": [
          {
            "system": "url",
            "value": "http://www.hl7.org/Special/committees/cqi/index.cfm"
          }
        ]
      }
    ],
    "relatedArtifact": [
      {
        "type": "depends-on",
        "resource": "Library/41151"
    }
    ],
    "dataRequirement": [
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code":[{
                "code":"73831-0"
            }]
          }
        ]
      },
      {
        "type": "Condition",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.450"
          }
        ]
      },  
      {
        "type": "Condition",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.145"
          }
        ]
      },  
      {
        "type": "Encounter",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.1916"
          }
        ]
      },  
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "code":[{
                "code":"73832-8"
            }]
          }
        ]
      },
      {
        "type": "Procedure",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.1542"
          }
        ]
      },
      {
        "type": "Procedure",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.1545"
          }
        ]
      },
      {
        "type": "MedicationRequest",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.469"
          }
        ]
      },
      {
        "type": "MedicationRequest",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.470"
          }
        ]
      },
      {
        "type": "ServiceRequest",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.537"
          }
        ]
      },
      {
        "type": "ServiceRequest",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.538"
          }
        ]
      },
      {
        "type": "Observation",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.559"
          }
        ]
      },
      {
        "type": "Procedure",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.467"
          }
        ]
      },
      {
        "type": "Procedure",
        "codeFilter": [
          {
            "path": "code",
            "valueSet": "urn:oid:2.16.840.1.113883.3.600.468"
          }
        ]
      }
    ],
    "content": [
      {
        "contentType": "text/cql",
        "data": ""
      }
    ]
  }